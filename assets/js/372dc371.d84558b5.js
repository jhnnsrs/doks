"use strict";(self.webpackChunkdoks=self.webpackChunkdoks||[]).push([[32447],{3905:(e,t,o)=>{o.d(t,{Zo:()=>u,kt:()=>h});var a=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function r(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,a,n=function(e,t){if(null==e)return{};var o,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)o=i[a],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)o=i[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var p=a.createContext({}),l=function(e){var t=a.useContext(p),o=t;return e&&(o="function"==typeof e?e(t):r(r({},t),e)),o},u=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(o),h=n,k=d["".concat(p,".").concat(h)]||d[h]||c[h]||i;return o?a.createElement(k,r(r({ref:t},u),{},{components:o})):a.createElement(k,r({ref:t},u))}));function h(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=o.length,r=new Array(i);r[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:n,r[1]=s;for(var l=2;l<i;l++)r[l]=o[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,o)}d.displayName="MDXCreateElement"},58325:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=o(87462),n=(o(67294),o(3905));const i={id:"app",title:"What is an App?",sidebar_label:"App",sidebar_position:1},r="What is an App?",s={unversionedId:"design/terminology/app",id:"design/terminology/app",title:"What is an App?",description:"Arkitekts is built around connecting Apps. Without these Apps arkitekt would be just a (reasonably cool) storage platform with a developer interface. Apps ( in the Arkitekt sense) are programs/robots/scripts that are able to connect to arkitekt and provide the functionality that makes Arkitekt useful (like applying filters to images) and give you the ability to interact with the data that you store in Arkitekt. As such, the definition of an arkitekt App is a bit broaders, than what you might think of as an App (especially if you are used to the App Store on your phone).",source:"@site/docs/design/terminology/app.md",sourceDirName:"design/terminology",slug:"/design/terminology/app",permalink:"/doks/docs/design/terminology/app",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/design/terminology/app.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"app",title:"What is an App?",sidebar_label:"App",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Terminology",permalink:"/doks/docs/category/terminology"},next:{title:"Tasks",permalink:"/doks/docs/design/terminology/tasks"}},p={},l=[{value:"Your security is important",id:"your-security-is-important",level:2},{value:"Apps can provide functionality",id:"apps-can-provide-functionality",level:2},{value:"Examples of Apps",id:"examples-of-apps",level:2},{value:"An &quot;App&quot; on your computer",id:"an-app-on-your-computer",level:3},{value:"A website",id:"a-website",level:3},{value:"Your code",id:"your-code",level:3},{value:"A robot or Iot device",id:"a-robot-or-iot-device",level:3},{value:"How does the App know where to connect to?",id:"how-does-the-app-know-where-to-connect-to",level:3},{value:"Versioning",id:"versioning",level:3}],u={toc:l};function c(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,a.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"what-is-an-app"},"What is an App?"),(0,n.kt)("p",null,"Arkitekts is built around connecting Apps. Without these Apps arkitekt would be just a (reasonably cool) storage platform with a developer interface. Apps ( in the Arkitekt sense) are programs/robots/scripts that are able to connect to arkitekt and provide the functionality that makes Arkitekt useful (like applying filters to images) and give you the ability to interact with the data that you store in Arkitekt. As such, the definition of an arkitekt App is a bit broaders, than what you might think of as an App (especially if you are used to the App Store on your phone). "),(0,n.kt)("h2",{id:"your-security-is-important"},"Your security is important"),(0,n.kt)("p",null,"One key design principle of Arkitekt is that you are in control of your data. You decide ",(0,n.kt)("strong",{parentName:"p"},"who")," can access your data, and you decide what they can do with it. That same principle applies to Apps. You decide which Apps are allowed to connect to Arkitekt, and you decide ",(0,n.kt)("strong",{parentName:"p"},"what"),' they are allowed to do with your data. This means that when an app decides to connect to Arkitekt, you will be asked to approve the connection and the permissions that the app is asking for.\n(this is done through Oauth2 Standard, the same principle that is used when you press "login with google", but you don\'t need to know that to use Arkitekt.). This double authentication process is key to Arkitekts security and some other design principles, and we will go into more detail about it in the ',(0,n.kt)("a",{parentName:"p",href:"/doks/docs/design/security/why"},"Security")," section."),(0,n.kt)("h2",{id:"apps-can-provide-functionality"},"Apps can provide functionality"),(0,n.kt)("p",null,"Depending on the App, you can use it to do a lot of different things. For example, you can use an App to just download images from Arkitekt, or you can use some interesting python code to display a graph of your data. One important aspect is that an app can also choose to expose some of its functionality as ",(0,n.kt)("a",{parentName:"p",href:"/doks/docs/design/terminology/template"},"Templates"),". This means that you can use the functionality of the App in other Apps, or in the Orkestrator. This is a very powerful feature, and we will go into more detail about it in the ",(0,n.kt)("a",{parentName:"p",href:"/doks/docs/design/terminology/node"},"Nodes and Templates")," section."),(0,n.kt)("h2",{id:"examples-of-apps"},"Examples of Apps"),(0,n.kt)("p",null,"As we are a firm believer in the power of the example, here are a few examples of Apps in the Arkitekt sense, and a few negative examples of Apps in the Arkitekt sense."),(0,n.kt)("h3",{id:"an-app-on-your-computer"},'An "App" on your computer'),(0,n.kt)("p",null,"An App on your computer is the obvious example, and yes, if that app is able to connect to Arkitekt (because the developer decided to make it an Arkitekt App), then it is an Arkitekt App. Easy. Two examples of this are the Orkestrator Desktop App, and MikroJ an app that is used to enable ImageJ on the platform. Both apps will as you to approve the connection to Arkitekt, and both apps will ask you for permissions."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"img",src:o(40286).Z,width:"1225",height:"1310"})),(0,n.kt)("p",null,"Importantly though the Orkestrator apps asks you for a lot more permissions than the MikroJ app, because the Orkestrator app is able to do a lot more things with your data. If you want to know more about the permissions that an App can ask for, you can read more about it in the ",(0,n.kt)("a",{parentName:"p",href:"/doks/docs/design/security/why"},"Security")," section. Always remember that you are in control of your data, and you decide what Apps are allowed to do with it, so check the permissions before you approve an App."),(0,n.kt)("h3",{id:"a-website"},"A website"),(0,n.kt)("p",null,'Also a website can be an an arkitekt app. Indeed this website is an arkitekt app (If you haven\'t done so already, you can try it out by clicking the "login with arkitekt" button in the top right corner). In most cases the website will ask you to point it to your arkitekt instance (which could be running on a public server, or in your local network), and then it will ask you to approve the connection. If you do, you will be able to use the website to interact with your data in Arkitekt.'),(0,n.kt)("h3",{id:"your-code"},"Your code"),(0,n.kt)("p",null,"Your code can also become an Arkitekt app. In fact, if you want your code to connect to an arkitekt server, it needs to become an app, because it needs rights to access your data. If you are using python you can use the arkitekt python library to connect to Arkitekt. If you are using javascript you can use the arkitekt javascript/typescript library. If you are using another language, you can use the Arkitekt API directly."),(0,n.kt)("p",null,"If you want to know more about how to connect to Arkitekt, you can read more about it in the ",(0,n.kt)("a",{parentName:"p",href:"/doks/docs/developers/intro"},"Developer")," section. We made sure to be compatible with standard webstandards (Oauth2, websockets), so you can use almost any language that is able to connect to a webserver."),(0,n.kt)("h3",{id:"a-robot-or-iot-device"},"A robot or Iot device"),(0,n.kt)("p",null,"Now this is where it gets interesting. Your robot or Iot device can also become an arkitekt app. Most of the time, these machines do not need access to your data, but can provide functionality like taking pictures, or measuring temperature. In this case you can use the ",(0,n.kt)("a",{parentName:"p",href:"/doks/docs/intro"},"Orkestrator")," to connect to your robot or Iot device, and call the functionality that it provides. This is a very powerful feature, and we will go into more detail about it in the ",(0,n.kt)("a",{parentName:"p",href:"/doks/docs/design/terminology/node"},"Nodes and Templates")," section."),(0,n.kt)("h3",{id:"how-does-the-app-know-where-to-connect-to"},"How does the App know where to connect to?"),(0,n.kt)("p",null,"As Arkitekt is nothing more than a server in your lab (or in the cloud), and these apps are just programs that run on your computer, they need to know where to connect to. So you might wonder how does the app know which server to use? The answer turns out to be quite difficult and you can read more about it in the advanced Discovery section. But the short answer is that the app needs to know the ip-adress of the Arkitekt server, which depending on your apps location can be autoconfigured through the network, or you can manually enter the ip-adress of the server.For example you are using the Orkestrator Desktop App, it will automatically discover the server, and if you are using the Orkestrator website, it will ask you to enter the ip-adress of the server."),(0,n.kt)("h3",{id:"versioning"},"Versioning"),(0,n.kt)("p",null,"Arkitekt was designed from the ground up to be able to handle different versions of the same App. This means that you can have multiple versions of the same App running at the same time, each with their own set of Templates (implementing the same or other nodes) and their own set of permissions. This is useful if you want to test a new version of an App, or if some functionality is not working as expected, you can always roll back to the previous version. Internally different versions of an App will become different AppClients (analogous to an Oauth2 Client)."),(0,n.kt)("p",null," You might think of an App like an application on your phone, and you would be right. But an App in Arkitekt is a bit more than that. Apps are "),(0,n.kt)("p",null,"An App is a collection of Nodes that are connected to each other. Each Node is a piece of code that does something, and each Node is connected to other Nodes. The connections between the Nodes are called Edges, and they are used to pass data between the Nodes."))}c.isMDXComponent=!0},40286:(e,t,o)=>{o.d(t,{Z:()=>a});const a=o.p+"assets/images/oauth_example-05358f4e6ee78c780770c5246409ac2f.png"}}]);