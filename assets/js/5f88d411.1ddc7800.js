"use strict";(self.webpackChunkdoks=self.webpackChunkdoks||[]).push([[45209],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(r),f=a,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||o;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},23277:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const o={title:"Live Graphs",sidebar_label:"Live Graphs",sidebar_position:1},i="KraphQL",s={unversionedId:"features/live_graphs",id:"features/live_graphs",title:"Live Graphs",description:"Arkitekt comes with experimental support for KraphQL, which is an extension of GraphQL syntax that allows you to query data through an GraphQL Api call and",source:"@site/docs/features/live_graphs.mdx",sourceDirName:"features",slug:"/features/live_graphs",permalink:"/doks/docs/features/live_graphs",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/features/live_graphs.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Live Graphs",sidebar_label:"Live Graphs",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Features",permalink:"/doks/docs/category/features"},next:{title:"Services",permalink:"/doks/docs/category/services"}},p={},l=[],c={toc:l};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"kraphql"},"KraphQL"),(0,a.kt)("p",null,"Arkitekt comes with experimental support for KraphQL, which is an extension of GraphQL syntax that allows you to query data through an GraphQL Api call and\nallows you to describe the data of your plots in a declarative way.\nThis is useful for building dashboards and other applications that need to display live data."),(0,a.kt)("p",null,"Let's discover ",(0,a.kt)("strong",{parentName:"p"},"Live Graphs in less than 5 minutes"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kraphql",metastring:"live",live:!0},'query {\n      GROUP: experiment(id: 6) {\n        OBJECT: id\n        TYPE: __typename\n        NAME: name\n\n        GROUPS: samples(tags: "bad", limit: 1) {\n          OBJECT: id\n          TYPE: __typename\n          NAME: name\n          DATA: representations(variety: VOXEL) {\n            DATUM_AS_TIME: omero {\n              VALUE_FROM_DATE: acquisitionDate\n            }\n\n            FLATDATUM_OBJECT_AS_INDEX: id\n            FLATDATUM_VALUE_FROM_INT_AS_INDEX: id\n            FLATDATUM_TYPE_AS_INDEX: __typename\n\n            DATUM_AS_EXPOSURE_TIME: omero {\n              OBJECT: id\n              TYPE: __typename\n              VALUE_FROM_SUM: planes {\n                VALUE_FROM_FLOAT: exposureTime\n              }\n            }\n          }\n        }\n      }\n    }\n')))}u.isMDXComponent=!0}}]);