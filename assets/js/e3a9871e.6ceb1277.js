"use strict";(self.webpackChunkdoks=self.webpackChunkdoks||[]).push([[76492],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=a.createContext({}),s=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(m.Provider,{value:t},e.children)},i={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,m=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),p=o,h=u["".concat(m,".").concat(p)]||u[p]||i[p]||r;return n?a.createElement(h,c(c({ref:t},d),{},{components:n})):a.createElement(h,c({ref:t},d))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,c=new Array(r);c[0]=u;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l.mdxType="string"==typeof e?e:o,c[1]=l;for(var s=2;s<r;s++)c[s]=n[s];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},37659:(e,t,n)=>{n.r(t),n.d(t,{Badge:()=>p,Bullet:()=>i,SpecifiedBy:()=>u,assets:()=>s,contentTitle:()=>l,default:()=>k,frontMatter:()=>c,metadata:()=>m,toc:()=>d});var a=n(87462),o=n(67294),r=n(3905);const c={id:"create-comment",title:"createComment",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null},l=void 0,m={unversionedId:"schemas/mikro/mutations/create-comment",id:"schemas/mikro/mutations/create-comment",title:"createComment",description:"Create an Comment",source:"@site/docs/schemas/mikro/mutations/create-comment.mdx",sourceDirName:"schemas/mikro/mutations",slug:"/schemas/mikro/mutations/create-comment",permalink:"/doks/docs/schemas/mikro/mutations/create-comment",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/schemas/mikro/mutations/create-comment.mdx",tags:[],version:"current",frontMatter:{id:"create-comment",title:"createComment",hide_table_of_contents:!0,pagination_next:null,pagination_prev:null},sidebar:"tutorialSidebar"},s={},d=[{value:"Arguments",id:"arguments",level:3},{value:'<code style={{ fontWeight: \'normal\' }}>createComment.<b>descendents</b></code><Bullet /><code>[DescendendInput]!</code> <Badge class="secondary" text="non-null"/> <Badge class="secondary" text="input"/>',id:"code-style-fontweight-normal-createcommentbdescendentsbcodedescendendinput--",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>createComment.<b>object</b></code><Bullet /><code>ID!</code> <Badge class="secondary" text="non-null"/> <Badge class="secondary" text="scalar"/>',id:"code-style-fontweight-normal-createcommentbobjectbcodeid--",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>createComment.<b>parent</b></code><Bullet /><code>ID</code> <Badge class="secondary" text="scalar"/>',id:"code-style-fontweight-normal-createcommentbparentbcodeid-",level:4},{value:'<code style={{ fontWeight: \'normal\' }}>createComment.<b>type</b></code><Bullet /><code>CommentableModels!</code> <Badge class="secondary" text="non-null"/> <Badge class="secondary" text="enum"/>',id:"code-style-fontweight-normal-createcommentbtypebcodecommentablemodels--",level:4},{value:"Type",id:"type",level:3},{value:'<code>Comment</code> <Badge class="secondary" text="object"/>',id:"comment-",level:4}],i=()=>(0,r.kt)(o.Fragment,null,(0,r.kt)("span",{style:{fontWeight:"normal",fontSize:".5em",color:"var(--ifm-color-secondary-darkest)"}},"\xa0\u25cf\xa0")),u=e=>(0,r.kt)(o.Fragment,null,"Specification",(0,r.kt)("a",{className:"link",style:{fontSize:"1.5em",paddingLeft:"4px"},target:"_blank",href:e.url,title:"Specified by "+e.url},"\u2398")),p=e=>(0,r.kt)(o.Fragment,null,(0,r.kt)("span",{class:"badge badge--"+e.class},e.text)),h={toc:d,Bullet:i,SpecifiedBy:u,Badge:p};function k(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Create an Comment "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"This mutation creates a comment. It takes a commentable_id and a commentable_type.\nIf this is the first comment on the commentable, it will create a new comment thread.\nIf there is already a comment thread, it will add the comment to the thread (by setting\nit's parent to the last parent comment in the thread).\n\nCreateComment takes a list of Descendents, which are the comment tree. The Descendents\nare a recursive structure, where each Descendent can have a list of Descendents as children.\nThe Descendents are either a Leaf, which is a text node, or a MentionDescendent, which is a\nreference to another user on the platform.\n\nPlease convert your comment tree to a list of Descendents before sending it to the server.\nTODO: Add a converter from a comment tree to a list of Descendents.\n\n\n(only signed in users)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"createComment(\n  descendents: [DescendendInput]!\n  object: ID!\n  parent: ID\n  type: CommentableModels!\n): Comment\n")),(0,r.kt)("h3",{id:"arguments"},"Arguments"),(0,r.kt)("h4",{id:"code-style-fontweight-normal-createcommentbdescendentsbcodedescendendinput--"},(0,r.kt)("a",{parentName:"h4",href:"#"},(0,r.kt)("code",{style:{fontWeight:"normal"}},"createComment.",(0,r.kt)("b",null,"descendents"))),(0,r.kt)(i,{mdxType:"Bullet"}),(0,r.kt)("a",{parentName:"h4",href:"/docs/schemas/mikro/inputs/descendend-input"},(0,r.kt)("inlineCode",{parentName:"a"},"[DescendendInput]!"))," ",(0,r.kt)(p,{class:"secondary",text:"non-null",mdxType:"Badge"})," ",(0,r.kt)(p,{class:"secondary",text:"input",mdxType:"Badge"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The comment tree")),(0,r.kt)("h4",{id:"code-style-fontweight-normal-createcommentbobjectbcodeid--"},(0,r.kt)("a",{parentName:"h4",href:"#"},(0,r.kt)("code",{style:{fontWeight:"normal"}},"createComment.",(0,r.kt)("b",null,"object"))),(0,r.kt)(i,{mdxType:"Bullet"}),(0,r.kt)("a",{parentName:"h4",href:"/docs/schemas/mikro/scalars/id"},(0,r.kt)("inlineCode",{parentName:"a"},"ID!"))," ",(0,r.kt)(p,{class:"secondary",text:"non-null",mdxType:"Badge"})," ",(0,r.kt)(p,{class:"secondary",text:"scalar",mdxType:"Badge"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The Representationss this sROI belongs to")),(0,r.kt)("h4",{id:"code-style-fontweight-normal-createcommentbparentbcodeid-"},(0,r.kt)("a",{parentName:"h4",href:"#"},(0,r.kt)("code",{style:{fontWeight:"normal"}},"createComment.",(0,r.kt)("b",null,"parent"))),(0,r.kt)(i,{mdxType:"Bullet"}),(0,r.kt)("a",{parentName:"h4",href:"/docs/schemas/mikro/scalars/id"},(0,r.kt)("inlineCode",{parentName:"a"},"ID"))," ",(0,r.kt)(p,{class:"secondary",text:"scalar",mdxType:"Badge"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The parent comment")),(0,r.kt)("h4",{id:"code-style-fontweight-normal-createcommentbtypebcodecommentablemodels--"},(0,r.kt)("a",{parentName:"h4",href:"#"},(0,r.kt)("code",{style:{fontWeight:"normal"}},"createComment.",(0,r.kt)("b",null,"type"))),(0,r.kt)(i,{mdxType:"Bullet"}),(0,r.kt)("a",{parentName:"h4",href:"/docs/schemas/mikro/enums/commentable-models"},(0,r.kt)("inlineCode",{parentName:"a"},"CommentableModels!"))," ",(0,r.kt)(p,{class:"secondary",text:"non-null",mdxType:"Badge"})," ",(0,r.kt)(p,{class:"secondary",text:"enum",mdxType:"Badge"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The type model you want to comment on")),(0,r.kt)("h3",{id:"type"},"Type"),(0,r.kt)("h4",{id:"comment-"},(0,r.kt)("a",{parentName:"h4",href:"/docs/schemas/mikro/objects/comment"},(0,r.kt)("inlineCode",{parentName:"a"},"Comment"))," ",(0,r.kt)(p,{class:"secondary",text:"object",mdxType:"Badge"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A comment")),(0,r.kt)("p",null,"A comment is a user generated comment on a commentable object. A comment can be a reply to another comment or a top level comment.\nComments can be nested to any depth. A comment can be edited and deleted by the user that created it."),(0,r.kt)("blockquote",null))}k.isMDXComponent=!0}}]);