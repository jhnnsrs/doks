"use strict";(self.webpackChunkdoks=self.webpackChunkdoks||[]).push([[381],{6914:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var n=o(7462),a=(o(7294),o(3905));const i={id:"node",title:"What is a Node?",sidebar_label:"Node",sidebar_position:1},s=void 0,d={unversionedId:"design/terminology/node",id:"design/terminology/node",title:"What is a Node?",description:"What is a node?",source:"@site/docs/design/terminology/node.md",sourceDirName:"design/terminology",slug:"/design/terminology/node",permalink:"/doks/docs/design/terminology/node",draft:!1,editUrl:"https://github.com/jhnnsrs/doks/edit/master/docs/design/terminology/node.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"node",title:"What is a Node?",sidebar_label:"Node",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tasks",permalink:"/doks/docs/design/terminology/tasks"},next:{title:"Template",permalink:"/doks/docs/design/terminology/template"}},r={},l=[{value:"What is a node?",id:"what-is-a-node",level:2},{value:"Nodes are not",id:"nodes-are-not",level:2},{value:"Programming Analogy",id:"programming-analogy",level:2}],m={toc:l};function g(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,n.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"what-is-a-node"},"What is a node?"),(0,a.kt)("p",null,"Nodes are a core conceptual element of the arkitekt platform, that represent the\nfunctionality that Arkitekt can do for you. "),(0,a.kt)("h2",{id:"nodes-are-not"},"Nodes are not"),(0,a.kt)("p",null,"One of the core concepts of Nodes are that they are not bound to an implementation. What do we mean with that:\nNodes are conceptual ideas about a specific task (like projecting an image)"),(0,a.kt)("h2",{id:"programming-analogy"},"Programming Analogy"),(0,a.kt)("p",null,"Everybody knows and loves functions, lets look at the sheer glory of one written in python:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\ndef project_image(image: Image, dim = "z") -> Image:\n    pro\n\n\nNodes are best explained in interplay with explaining it with a Template\n')))}g.isMDXComponent=!0}}]);